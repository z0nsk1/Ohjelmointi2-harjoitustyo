package Jasenrekisteri.test;
// Generated by ComTest BEGIN
import java.io.File;
import Jasenrekisteri.*;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2020.04.30 12:42:56 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class HarjoituksetTest {



  // Generated by ComTest BEGIN
  /** test_lisaa_poista */
  @Test
  public void test_lisaa_poista() {    // Harjoitukset: 20
    Harjoitukset harjoitukset = new Harjoitukset(); 
    Harjoitus harj1 = new Harjoitus(); harj1.parse("1|20191215|1500|1700|2|4|Hyva treeni"); 
    Harjoitus harj2 = new Harjoitus(); harj2.parse("2|20191220|1800|2000|5|1|Hyva treeni"); 
    Harjoitus harj3 = new Harjoitus(); harj3.parse("3|20191011|1600|1900|1|2|Hyva treeni"); 
    Harjoitus harj4 = new Harjoitus(); harj4.parse("4|20190907|1700|1830|3|4|Hyva treeni"); 
    Harjoitus harj5 = new Harjoitus(); harj5.parse("5|20180316|1800|1930|5|4|Hyva treeni"); 
    harjoitukset.lisaa(harj1); 
    harjoitukset.lisaa(harj2); 
    harjoitukset.lisaa(harj3); 
    harjoitukset.lisaa(harj4); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * test_tiedosto 
   * @throws SailoException when error
   */
  @Test
  public void test_tiedosto() throws SailoException {    // Harjoitukset: 40
    Harjoitukset harjoitukset = new Harjoitukset(); 
    Harjoitus harj1 = new Harjoitus(); harj1.parse("1|20191215|1500|1700|2|4|Hyva treeni"); 
    Harjoitus harj2 = new Harjoitus(); harj2.parse("2|20191220|1800|2000|5|1|Hyva treeni"); 
    Harjoitus harj3 = new Harjoitus(); harj3.parse("3|20191011|1600|1900|1|2|Hyva treeni"); 
    Harjoitus harj4 = new Harjoitus(); harj4.parse("4|20190907|1700|1830|3|4|Hyva treeni"); 
    Harjoitus harj5 = new Harjoitus(); harj5.parse("5|20180316|1800|1930|5|4|Hyva treeni"); 
    String tiedNimi = "testiJoukkue"; 
    File ftied = new File(tiedNimi+".dat"); 
    ftied.delete(); 
    try {
    harjoitukset.lueTiedostosta(tiedNimi); 
    fail("Harjoitukset: 52 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    harjoitukset.lisaa(harj1); 
    harjoitukset.lisaa(harj2); 
    harjoitukset.lisaa(harj3); 
    harjoitukset.lisaa(harj4); 
    harjoitukset.lisaa(harj5); 
    harjoitukset.tallenna(); 
    harjoitukset = new Harjoitukset(); 
    harjoitukset.lueTiedostosta(tiedNimi); 
    Iterator<Harjoitus> i = harjoitukset.iterator(); 
    assertEquals("From: Harjoitukset line: 62", harj1.toString(), i.next().toString()); 
    assertEquals("From: Harjoitukset line: 63", harj2.toString(), i.next().toString()); 
    assertEquals("From: Harjoitukset line: 64", harj3.toString(), i.next().toString()); 
    assertEquals("From: Harjoitukset line: 65", harj4.toString(), i.next().toString()); 
    assertEquals("From: Harjoitukset line: 66", harj5.toString(), i.next().toString()); 
    assertEquals("From: Harjoitukset line: 67", false, i.hasNext()); 
    harjoitukset.lisaa(harj5); 
    harjoitukset.tallenna(); 
    assertEquals("From: Harjoitukset line: 70", true, ftied.delete()); 
    File fbak = new File(tiedNimi+".bak"); 
    assertEquals("From: Harjoitukset line: 72", true, fbak.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** test_iterator */
  @Test
  public void test_iterator() {    // Harjoitukset: 76
    Harjoitukset harjoitukset = new Harjoitukset(); 
    Harjoitus harj1 = new Harjoitus(); harjoitukset.lisaa(harj1); 
    Harjoitus harj2 = new Harjoitus(); harjoitukset.lisaa(harj2); 
    Harjoitus harj3 = new Harjoitus(); harjoitukset.lisaa(harj3); 
    Harjoitus harj4 = new Harjoitus(); harjoitukset.lisaa(harj4); 
    Harjoitus harj5 = new Harjoitus(); harjoitukset.lisaa(harj5); 
    Iterator<Harjoitus> i2=harjoitukset.iterator(); 
    assertEquals("From: Harjoitukset line: 89", harj1, i2.next()); 
    assertEquals("From: Harjoitukset line: 90", harj2, i2.next()); 
    assertEquals("From: Harjoitukset line: 91", harj3, i2.next()); 
    assertEquals("From: Harjoitukset line: 92", harj4, i2.next()); 
    assertEquals("From: Harjoitukset line: 93", harj5, i2.next()); 
    try {
    assertEquals("From: Harjoitukset line: 94", harj4, i2.next()); 
    fail("Harjoitukset: 94 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
    int n = 0; 
    int jnrot[] = { 2,1,2,1,2} ; 
    for ( Harjoitus har:harjoitukset ) {
    assertEquals("From: Harjoitukset line: 100", jnrot[n], har.getJasenNro()); n++; 
    }
    assertEquals("From: Harjoitukset line: 103", 5, n); 
  } // Generated by ComTest END
}